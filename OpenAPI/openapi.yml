openapi: '3.0.2'
info:
  title: itemper API
  description: |
    This API allows managing iTemper users, sensor devices and their locations
  version: '1.0'
servers:
  - url: https://api.itemper.io/v1
    description: production servers
  - url: https://staging.itemper.io/v1
    description: Staging server
security:
  - BearerAuth: []
paths:
  /signup:
    post:
      security: []
      requestBody:
          $ref: '#/components/requestBodies/SetupLogin'
      responses:
        '200':
          $ref: '#/components/responses/LoggedInUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
  /login:
      post:
        security: []
        requestBody:
          $ref: '#/components/requestBodies/SetupLogin'
        responses:
          '200':
            $ref: '#/components/responses/LoggedInUser'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '403':
            $ref: '#/components/responses/Forbidden'
          '415':
            $ref: '#/components/responses/UnsupportedMediaType'
  /logout:
    post:
      responses:
        '200':
          description: Logout successful  
          $ref: '#/components/responses/Succeeded'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /users:
    post:
      requestBody:
          $ref: '#/components/requestBodies/SetupLogin'
      responses:
        '200':
          $ref: '#/components/responses/LoggedInUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
    delete:
      requestBody:
        content:
          'application/json':
            schema:
              additionalProperties: false
              type: object
              required:
                - email
              properties:
                email:
                  $ref: '#/components/schemas/Email'
      responses:
        '200':
          description: Tenant user deleted successfully  
          $ref: '#/components/responses/Succeeded'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT  
  schemas:
    Email:
      type: string
      format: email
      pattern: ^[a-zA-Z0-9_+&*-]+(?:\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\.)+[a-zA-Z]{2,7}$
      maxLength: 256
    Password:
      type: string
      format: password
      pattern: (.){4,256}
      minLength: 4
      maxLength: 256
    Code:
          type: string
          maxLength: 7
          pattern: ^(\d{3})(\.\d{1,3})?$
    SafeText:
      type: string
      pattern: ^[a-zA-Z0-9 .-]+$
      maxLength: 1024
    ObjectID:
      type: string
      pattern: ^[0-9a-fA-F]{24}
      maxLength: 24
    JWT:
      type: string
      format: JWT
      pattern: ^[\w-]+\.[\w-]+\.[\w-]+$
      maxLength: 8000
    Credentials:
      type: object
      additionalProperties: false
      required:
      - email
      - password
      properties:
        email:
          $ref: '#/components/schemas/Email'
        password:
          $ref: '#/components/schemas/Password'
    LoggedInUser:
      type: object
      additionalProperties: false
      properties:
        email:
          $ref: '#/components/schemas/Email'
        token:
          $ref: '#/components/schemas/JWT'
        tenantID:
          $ref: '#/components/schemas/ObjectID'
    Status:
      type: object
      additionalProperties: false
      properties:
        code:
          $ref: '#/components/schemas/Code'
        message:
          $ref: '#/components/schemas/SafeText'
  requestBodies:
    SetupLogin:
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Credentials'
  responses:
    LoggedInUser:
      description: New user signed up and logged in
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/LoggedInUser'
    Succeeded:
      description: 200 Succeeded
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Status'    
    Unauthorized:
      description: 401 Unauthorized
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Status'
    NotFound:
      description: 404 NotFound
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Status'
    UnsupportedMediaType:
      description: 415 Unsupported media type, wrong content-type
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Status'
    Forbidden:
      description: 403 Forbidden
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Status'
    UnexpectedError:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Status'
